/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.mensageria_kafka.pix_consumer.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class PixRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6084569139401533014L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PixRecord\",\"namespace\":\"br.com.mensageria_kafka.pix.avro\",\"fields\":[{\"name\":\"identifier\",\"type\":\"string\"},{\"name\":\"originKey\",\"type\":\"string\"},{\"name\":\"destinationKey\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"transferDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PixRecord> ENCODER =
      new BinaryMessageEncoder<PixRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PixRecord> DECODER =
      new BinaryMessageDecoder<PixRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PixRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PixRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PixRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PixRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PixRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PixRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PixRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PixRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence identifier;
   private CharSequence originKey;
   private CharSequence destinationKey;
   private double value;
   private CharSequence transferDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PixRecord() {}

  /**
   * All-args constructor.
   * @param identifier The new value for identifier
   * @param originKey The new value for originKey
   * @param destinationKey The new value for destinationKey
   * @param value The new value for value
   * @param transferDate The new value for transferDate
   */
  public PixRecord(CharSequence identifier, CharSequence originKey, CharSequence destinationKey, Double value, CharSequence transferDate) {
    this.identifier = identifier;
    this.originKey = originKey;
    this.destinationKey = destinationKey;
    this.value = value;
    this.transferDate = transferDate;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return originKey;
    case 2: return destinationKey;
    case 3: return value;
    case 4: return transferDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: identifier = (CharSequence)value$; break;
    case 1: originKey = (CharSequence)value$; break;
    case 2: destinationKey = (CharSequence)value$; break;
    case 3: value = (Double)value$; break;
    case 4: transferDate = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public CharSequence getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(CharSequence value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'originKey' field.
   * @return The value of the 'originKey' field.
   */
  public CharSequence getOriginKey() {
    return originKey;
  }


  /**
   * Sets the value of the 'originKey' field.
   * @param value the value to set.
   */
  public void setOriginKey(CharSequence value) {
    this.originKey = value;
  }

  /**
   * Gets the value of the 'destinationKey' field.
   * @return The value of the 'destinationKey' field.
   */
  public CharSequence getDestinationKey() {
    return destinationKey;
  }


  /**
   * Sets the value of the 'destinationKey' field.
   * @param value the value to set.
   */
  public void setDestinationKey(CharSequence value) {
    this.destinationKey = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'transferDate' field.
   * @return The value of the 'transferDate' field.
   */
  public CharSequence getTransferDate() {
    return transferDate;
  }


  /**
   * Sets the value of the 'transferDate' field.
   * @param value the value to set.
   */
  public void setTransferDate(CharSequence value) {
    this.transferDate = value;
  }

  /**
   * Creates a new PixRecord RecordBuilder.
   * @return A new PixRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new PixRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PixRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new PixRecord RecordBuilder by copying an existing PixRecord instance.
   * @param other The existing instance to copy.
   * @return A new PixRecord RecordBuilder
   */
  public static Builder newBuilder(PixRecord other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for PixRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PixRecord>
    implements org.apache.avro.data.RecordBuilder<PixRecord> {

    private CharSequence identifier;
    private CharSequence originKey;
    private CharSequence destinationKey;
    private double value;
    private CharSequence transferDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.originKey)) {
        this.originKey = data().deepCopy(fields()[1].schema(), other.originKey);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.destinationKey)) {
        this.destinationKey = data().deepCopy(fields()[2].schema(), other.destinationKey);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transferDate)) {
        this.transferDate = data().deepCopy(fields()[4].schema(), other.transferDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing PixRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(PixRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originKey)) {
        this.originKey = data().deepCopy(fields()[1].schema(), other.originKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.destinationKey)) {
        this.destinationKey = data().deepCopy(fields()[2].schema(), other.destinationKey);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transferDate)) {
        this.transferDate = data().deepCopy(fields()[4].schema(), other.transferDate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public CharSequence getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public Builder setIdentifier(CharSequence value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'originKey' field.
      * @return The value.
      */
    public CharSequence getOriginKey() {
      return originKey;
    }


    /**
      * Sets the value of the 'originKey' field.
      * @param value The value of 'originKey'.
      * @return This builder.
      */
    public Builder setOriginKey(CharSequence value) {
      validate(fields()[1], value);
      this.originKey = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'originKey' field has been set.
      * @return True if the 'originKey' field has been set, false otherwise.
      */
    public boolean hasOriginKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'originKey' field.
      * @return This builder.
      */
    public Builder clearOriginKey() {
      originKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationKey' field.
      * @return The value.
      */
    public CharSequence getDestinationKey() {
      return destinationKey;
    }


    /**
      * Sets the value of the 'destinationKey' field.
      * @param value The value of 'destinationKey'.
      * @return This builder.
      */
    public Builder setDestinationKey(CharSequence value) {
      validate(fields()[2], value);
      this.destinationKey = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationKey' field has been set.
      * @return True if the 'destinationKey' field has been set, false otherwise.
      */
    public boolean hasDestinationKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'destinationKey' field.
      * @return This builder.
      */
    public Builder clearDestinationKey() {
      destinationKey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public Builder setValue(double value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public Builder clearValue() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transferDate' field.
      * @return The value.
      */
    public CharSequence getTransferDate() {
      return transferDate;
    }


    /**
      * Sets the value of the 'transferDate' field.
      * @param value The value of 'transferDate'.
      * @return This builder.
      */
    public Builder setTransferDate(CharSequence value) {
      validate(fields()[4], value);
      this.transferDate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transferDate' field has been set.
      * @return True if the 'transferDate' field has been set, false otherwise.
      */
    public boolean hasTransferDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transferDate' field.
      * @return This builder.
      */
    public Builder clearTransferDate() {
      transferDate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PixRecord build() {
      try {
        PixRecord record = new PixRecord();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (CharSequence) defaultValue(fields()[0]);
        record.originKey = fieldSetFlags()[1] ? this.originKey : (CharSequence) defaultValue(fields()[1]);
        record.destinationKey = fieldSetFlags()[2] ? this.destinationKey : (CharSequence) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (Double) defaultValue(fields()[3]);
        record.transferDate = fieldSetFlags()[4] ? this.transferDate : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PixRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PixRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PixRecord>
    READER$ = (org.apache.avro.io.DatumReader<PixRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.identifier);

    out.writeString(this.originKey);

    out.writeString(this.destinationKey);

    out.writeDouble(this.value);

    out.writeString(this.transferDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);

      this.originKey = in.readString(this.originKey instanceof Utf8 ? (Utf8)this.originKey : null);

      this.destinationKey = in.readString(this.destinationKey instanceof Utf8 ? (Utf8)this.destinationKey : null);

      this.value = in.readDouble();

      this.transferDate = in.readString(this.transferDate instanceof Utf8 ? (Utf8)this.transferDate : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
          break;

        case 1:
          this.originKey = in.readString(this.originKey instanceof Utf8 ? (Utf8)this.originKey : null);
          break;

        case 2:
          this.destinationKey = in.readString(this.destinationKey instanceof Utf8 ? (Utf8)this.destinationKey : null);
          break;

        case 3:
          this.value = in.readDouble();
          break;

        case 4:
          this.transferDate = in.readString(this.transferDate instanceof Utf8 ? (Utf8)this.transferDate : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










